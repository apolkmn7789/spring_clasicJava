의존관계 주입방법
1. 생성자
2. 수정자(setter)
3. 필드
4. 일반 메서드
생성자 주입
생성자
생성자에 @Autowired 통해 의존관계를 주입 받는 방법.
생성자가 하나라면 생략이 가능하다.
특징
생성자 호출 시점에 딱 1번만 호출
 - 값이 셋팅 되면 값을 다시 셋팅(수정) 하지 못하도록 제약 가능
 불변,필수 의존 관계에 사용
 좋은 개발 습관은 불변이다. (제약이 있는게 좋다)
 수정자
 get /set 메서드에 @Autowired 를 통해 주입 받는 방법
 특징
 선택,변경 가능성이 있는 의존 관계에 사용
 3.필드 주입
 이름 그대로 필드에 바로 주입하는 방법
 코드가 간결하지만 외부에서 변경이 불가능해서 테스트 하기 힘들다는 단점
 사용하지 말자!!!
 4. 메서드 주입
 생성자 주입과 같은 방법으로 사용한다
 특징
 한번에 여러 필드를 주입 받을 수 있다.
 일반적으로 잘 사용하지 않는다.
 보통 생서자 주입 방식을 많이 사용한다.
 *의존관게 주입은 스프링 컨테이너가 관리하는 빈이어야 동작함*
   -스프링 빈이 아닌 Member 같은 클래스에서 @Autowired 를 사용해도
    아무 기능도 동작 하지 않음.

옵션 처리
@Autowired 를 사용하면 기본 옵션으로 required 가 true 로 설정 되어 있다
자동 주입 대상을 옵션으로 처리하는 방법
1. @Autowired(required=false)
자동 주입할 대상이 없으면 메서드 자체가 호출이 되지 않는다.
2. @Nullable
자동 주입할 대상이 없으면 Null 이 입력 된다.
3. Optional<>
자동 주입할 대상이 없으면 Optional.empty 가 입력 된다.

생성자 주입의 장점
최근에는 DI 프레임워크 대부분이 생성자 주입을 권장 한다.
*불변*
대부분의 의존관계 주입은 한번 일어나면 종료시점까지 변경할 일이 없다
  오히려 대부분의 의존관계는 애플리케이션 종료 전까지 변하면 안됨
수정자 주입을 사용하면 메서드를 public 으로 열어둬야 함
누군가 실수로 변경할 수 도 있고 변하면 안되는 메서드를 열어두는 것은
  좋은 설계 방법이 아님
생성자 주입은 객체를 생성 할 때 한번만 호출되므로 이후에 호출할 일이 없음
프레임워크에 의존하지 않고 순수한 자바 언어의 특징을 잘 살리는 방법
기본적으로 생성자 주입을 사용하고 필수 값이 아닌 경우에는 수정자 방식으로
  옵션을 부여하면 됨 (생성자,수정자 주입을 동시에 사용가능)
**기본적으로 생성자 옵션이 필요하면 수정자 방식 사용**

롬복
@RequiredArgsConstructor 를 통해 생성자를 직접 생성해 줌

@Autowired 매칭
@Qualifier
@primary
어노테이션 만들기

일반적으로 자동 빈 사용
수동빈은 언제 사용하면 좋을까?
  직접 등록하는 기술 지원 객체
  다형성을 적극 활용하는 비즈니스 로직은 수동 등록 고민

빈 생명주기 콜백
 인터페이스로 콜백
   단점
    스프링의 기본을 따라감
    메서드의 이름 변경x
    코드 수정이 불가능한 외부 라이브러리를 사용
    새로운게 나와서 이 방법은 사용하지 않는다.
  빈 등록 초기화
   특징
     메서드 이름 자유로움
     스프링 빈이 스프링 코드에 의존하지 않음
     외부 라이브러리에도 초기화 종료 가능
     @Bean 의 옵션으로 기능 지원?
   조금 편리하게 진화했지만 마지막 방법으로만 사용할거 같다
 ** 어노테이션 (@PostConstruct / @PreDestory 으로 간편하게 사용 **

